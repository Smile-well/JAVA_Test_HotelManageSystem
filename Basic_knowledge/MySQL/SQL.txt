DQL：数据查询语言（select）
DML：数据操作语言（insert、delete、update）
DDL：数据定义语言（create、drop、alter）
TCL：事务控制语言（commit、rollback）
DCL：数据控制语言（grant、revoke）

聚合函数自动忽略null，不用加where if not null
有null参与的运算结果一定是null

空处理函数
ifnull(可能为空的数据，被当做什么处理)
ifnull(age,18)

count(*)：统计总记录的条数，和字段无关
count(age)：age字段中不为null的数据总条数

分组：group by
select ___ from ___ group by ____;
先分组，再聚合，再查询

执行顺序：from > where > group by > having > order by > select > limit
语句顺序：select from where group by having order by limit

having、where：having分组后执行（group by的搭档），where分组前执行
where效率比having高

group by：select只能跟参加分组的字段和和聚合函数

联合a,b分组：
select xx from xx group by a,b

去除重复查询结果：distinct
select distinct xx from xx;


************************************************************************
多表连接查询：
笛卡尔积现象：两表连接查询时，如果没有条件限制，最终结果是两表记录条数的乘积
避免笛卡尔积现象不会减少查询次数

SQL92和SQL99：99语法的连接和条件分离了
92：select xx from a,b where xxx 
99：select xx from a join b on xx where xxx 

内连接：非等值连接和等值连接（没有主副表的区分）
自连接：一张表当两张用，重命名
外联接：有一张主表一张副表，主要是查询主表的数据，主表数据匹配但副表数据不匹配的自动用null填充

************************************************************************

子查询：
出现的位置：select（用的少）、from、where
select xx 
from
(select ...)
where
xx (select ...) 

************************************************************************

union：连接两个查询结果集（不相关的表也可以,列的数量要相同）
(select ...) union (select...) 

limit：
limit startIndex,length;   startIndex：起始下标为0

分页显示：
每页显示  
第pageNo页：((pageNo-1)*pageSize),pageSize
	第1页：limit （1-1）*3,3;
	第2页：limit （2-1）*3,3;
	。。。

************************************************************************

create table xx as (selcet...) 将查询结果当做表创建出来

************************************************************************

约束
非空约束（not null）
唯一约束（unique）
主键约束（primary key）:不能为空，不能重复
外键约束（foreign key）:可以为空

not null约束是列级约束，没有表级约束
primary key约束是列级约束，没有表级约束

主键：主键值是这行记录在这张表的唯一标识（和一个人的身份证号一样）
自增：
create table xx(
	id int primary key auto_increment, //id自动维护一个自增的数字，从1开始，以一递增
	username varchar(255)
)
insert into xx (username) values ('x');  //可以不用给主键值赋值


外键：具有外键约束的字段必须从引用的外键字段中选值
被引用的表是父表，引用的是子表
外键引用的不一定是主键，但是至少要有唯一性约束

子表从父表的字段中选值，删除时先删子表再删父表（虽然可以级联操作，但是不建议）
drop table if exists super_table_name;
drop table if exists sub_table_name;

foreign key(col_name) references tableName(col_name)

************************************************************************

存储引擎（Engine）
show create table xxx;可以查看
默认Engine是InnoDB方式
mysql支持很多Engine

常用的：InnoDB：支持事务，行级锁，外键（支持级联删除和级联更新）等
		数据存储在tablespace中（逻辑概念），不可被压缩，无法转换为只读
		重量级的，MySQL崩溃后可自动恢复，是最安全的
	MYISAM：不支持事务，可被压缩，可转换为只读
		由三个文件组成：结构（.frm）、数据（.MYD）、索引（.MYI）
	MEMORY：查询速度快，不支持事务，但容易丢失数据，支持表级锁机制
		表数据存储在内存中

 ************************************************************************

事务（Transaction）
通常事务都是由多个DML语句联合完成（insert、delete、update）
事务保证多条DML语句同时成功和同时失败

过程：
	1、开启事务机制 -->开始
	2、执行DML语句（记录操作历史，不会真正操作硬盘的文件）
	3、（TCL）提交事务或回滚事务 --> 结束
		commit：提交记录的操作历史，真正修改硬盘文件
		rollBack：清空记录的操作历史，不会修改文件

事务特性：ACID
	A：原子性：事务是最小单元，不可再分
	C：一致性：多条DML语句同时成功和同时失败
	I：隔离性：不同事务之间具有隔离
	D：持久性：最终数据必须持久化保存到硬盘文件中，事务才算成功的结束

事务之间的隔离性（MySQL默认第二级别）
set global transaction isolation level xxx;
第一级别：read uncommitted
	对方事务还没有提交，我们当前事务可以读取到对方还未提交的数据
	读取未提交的数据存在脏读（Dirty Read）:读取到了脏的数据（不稳定，容易丢失）
第二级别：read committed
	对方事务已经提交，我们当前事务可以读取到对方提交的数据
	不可重复读，每次读取的数据不一样
第三级别：repeatable read
	可重复读，但读取到的是幻象（备份数据）
第四级别：序列化读、串行化读（serializable）
	效率低，需要事务排队


mysql默认是自动提交，可以关闭自动提交机制（start transaction;）

 ************************************************************************

索引（index）
底层结构：B + Tree（左小右大存储，中序遍历），和TreeMap一样
添加索引是指给字段添加索引
通过索引可以快速查找到对应的资源

虽然很快，但是不能随便添加索引，数据改变的时候索引要重新排序
使用索引的情况：数据量庞大，该字段很少用DML操作，该字段经常出现在where字句中。。。

具有主键和unique约束的字段会自动添加索引

创建、删除索引：
	create index 索引名称 on 表名（或字段名）;
	dropi index 索引名称 on 表名（或字段名）;

单一索引：单个字段添加索引
复合索引：多个字段联合添加一个索引
主键索引：主键自动添加的
唯一索引：unique约束自动添加的
。。。

索引失效：模糊查询（影响效率）的时候，第一个通配符使用的是%，索引会失效

************************************************************************

识图（view）
不同角度看数据

创建删除视图
	create view 视图名称 as select 字段名,字段名,..;
	drop view 视图名称;
	只有DQL语句才能以视图对象的方式创建出来

对视图增删改查会影响原表的数据，（通过视图操作原表，CRUD操作）

视图可以隐藏表的实现细节

************************************************************************

DBA命令：

导出数据库数据
mysqldump 数据库名称>指定位置 -u root -p 1234

导入：
sql脚本：把SQL代码放到一个sql文件中
执行方法：resource xx.sql

************************************************************************

设计三范式
设计表的依据，按照三范式设计的不会出现数据冗余

第一范式：每个表都应该有主键，且每个字段都应该遵循原子性
第二范式：建立在第一范式的基础之上，所有的非主键字段完全依赖主键
	（多对多的时候，三张表，关系表里面有两个外键）
第三范式：建立在第二范式之上所有非主键字段直接依赖主键，不能产生传递依赖
	（一对多的时候，两张表，多的加外键）


一对一：共享主键或外键唯一

