出现线程安全问题的两个条件 缺一不可：
1、多线程访问
2、可修改的共享数据

JVM线程安全问题分析
栈内存：一个JVM为每一个线程创建一个栈，出栈后局部变量消失，不存在线程安全问题
堆内存：一个JVM只有一个堆内存，是共享的，对象存放在堆内存中，实际就是成员变量
	的集合存在堆内存中，这是多线程共享的，存在线程安全问题
方法区：一个JVM只有一个方法区，静态变量和常量存在方法区。常量不可修改，但静态
	变量是多线程共享的，所以静态变量存在线程安全问题
	

解决：
尽量不要使用单例类
尽量不要定义静态变量
如果定义了单例类，尽量不要使用实例（成员）变量
如果必须使用成员变量，则要加上串行化锁synchronized，实现线程同步（但是会影响执行效率）
